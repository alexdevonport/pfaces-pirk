#-----------------------------------------------------------------------
# File: minimal.mem
# Date: 13.06.2019
# Athr: A. Devonport
# Desc: This file describes the memory buffers needed by the kernel and
#       how they are distributed as arguments to the kernel functions
#       Each top scope is a function name followed by inner scopes for 
#       the argument names and they contain the memory fingerprint.
#-----------------------------------------------------------------------

# Note: functions index (from 0) and argument index (from 0) is considered by their appearance order

# function: 0- initialize
# -----------------------
initialize{ 

	# argument 0.0: initial_state (gets attached to a new buffer)
	# ----------------------------------------------------
	initial_state{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}

}

# function: 1- rk4
# -----------------------
rk4{ 

	# argument 1.0: initial_state (gets attached to 0.0's buffer)
	# ----------------------------------------------------
	initial_state{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "false";
		residentFuncIdx			= "0";  # QN: is this the right way to signal that this is the same memory object as the initial_state from initialize?
		residentFuncArgIdx		= "0";  # QN: is this the right way to signal that this is the same memory object as the initial_state from initialize?
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}

	# argument 1.1: final_state (gets attached to a new buffer)
	# ----------------------------------------------------
	final_state{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
	# argument 1.2: input (gets attached to a new buffer)
	# ----------------------------------------------------
	input{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
	# argument 1.3: k0 (gets attached to a new buffer)
	# ----------------------------------------------------
	k0{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
	# argument 1.4: k1 (gets attached to a new buffer)
	# ----------------------------------------------------
	k1{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
	# argument 1.5: k2 (gets attached to a new buffer)
	# ----------------------------------------------------
	k2{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
	# argument 1.6: k3 (gets attached to a new buffer)
	# ----------------------------------------------------
	k3{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
	# argument 1.7: tmp (gets attached to a new buffer)
	# ----------------------------------------------------
	tmp{
		directionWriteOrRead	= "false";
		HostDoWrite				= "false";
		HostDoRead				= "false";
		memAccessFlag			= "CL_MEM_READ_WRITE";
		baseTypeSize			= "4";
		baseTypeMultiple		= "1";
		baseTypeXDimMultiple	= "0";
		baseTypeYDimMultiple	= "0";
		deviceMultiple			= "false";
		isGlobalMemory			= "true";
		isConstantMemory		= "false";
		isLocalMemory			= "false";
		isRangeScalable			= "true";
		isNewOrResident			= "true";
		residentFuncIdx			= "-1";
		residentFuncArgIdx		= "-1";
		requiresSubBuffering	= "true";
		equalSubBufferSizes		= "false";
	}
	
}
